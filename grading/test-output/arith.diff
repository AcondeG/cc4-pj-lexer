0a1,25
> '('
> '*'
> '*'
> TYPEID A
> OBJECTID contribution
> OBJECTID from
> TYPEID Anne
> TYPEID Sheets
> '('
> OBJECTID sheets
> LEXER BUG - UNMATCHED: @
> OBJECTID cory
> ')'
> '*'
> '*'
> TYPEID Tests
> OBJECTID the
> OBJECTID arithmetic
> OBJECTID operations
> OBJECTID and
> OBJECTID various
> OBJECTID other
> OBJECTID things
> '*'
> ')'
46a72,74
> '-'
> '-'
> OBJECTID same
62a91,93
> '-'
> '-'
> OBJECTID plus
98a130,132
> '-'
> '-'
> OBJECTID negate
137a172,174
> '-'
> '-'
> OBJECTID diff
205a243,245
> '-'
> '-'
> OBJECTID factorial
265a306,312
> '-'
> '-'
> TYPEID B
> OBJECTID is
> OBJECTID a
> OBJECTID number
> OBJECTID squared
274a322,324
> '-'
> '-'
> OBJECTID square
317a368,370
> '-'
> '-'
> OBJECTID negate
352a406,408
> '-'
> '-'
> OBJECTID cube
397a454,458
> '-'
> '-'
> OBJECTID divisible
> OBJECTID by
> INT_CONST 3
466a528,530
> '-'
> '-'
> OBJECTID division
495a560,660
> '('
> '*'
> TYPEID The
> OBJECTID following
> OBJECTID code
> OBJECTID is
> OBJECTID from
> OBJECTID atoi
> '.'
> OBJECTID cl
> IN
> '~'
> OBJECTID cs164
> '/'
> OBJECTID examples
> '*'
> ')'
> '('
> '*'
> TYPEID The
> CLASS
> TYPEID A2I
> OBJECTID provides
> OBJECTID integer
> '-'
> OBJECTID to
> '-'
> OBJECTID string
> OBJECTID and
> OBJECTID string
> '-'
> OBJECTID to
> '-'
> OBJECTID integer
> OBJECTID conversion
> OBJECTID routines
> '.'
> TYPEID To
> OBJECTID use
> OBJECTID these
> OBJECTID routines
> ','
> OBJECTID either
> OBJECTID inherit
> OBJECTID them
> IN
> OBJECTID the
> CLASS
> OBJECTID where
> OBJECTID needed
> ','
> OBJECTID have
> OBJECTID a
> OBJECTID dummy
> OBJECTID variable
> OBJECTID bound
> OBJECTID to
> OBJECTID something
> OF
> OBJECTID type
> TYPEID A2I
> ','
> OBJECTID or
> OBJECTID simpl
> OBJECTID write
> '('
> NEW
> TYPEID A2I
> ')'
> '.'
> OBJECTID method
> '('
> OBJECTID argument
> ')'
> '.'
> '*'
> ')'
> '('
> '*'
> OBJECTID c2i
> TYPEID Converts
> OBJECTID a
> INT_CONST 1
> '-'
> OBJECTID character
> OBJECTID string
> OBJECTID to
> OBJECTID an
> OBJECTID integer
> '.'
> TYPEID Aborts
> IF
> OBJECTID the
> OBJECTID string
> OBJECTID is
> NOT
> STR_CONST "0"
> OBJECTID through
> STR_CONST "9"
> '*'
> ')'
585a751,762
> '('
> '*'
> OBJECTID the
> INT_CONST 0
> OBJECTID is
> OBJECTID needed
> OBJECTID to
> OBJECTID satisfy
> OBJECTID the
> OBJECTID typchecker
> '*'
> ')'
597a775,785
> '('
> '*'
> OBJECTID i2c
> OBJECTID is
> OBJECTID the
> OBJECTID inverse
> OF
> OBJECTID c2i
> '.'
> '*'
> ')'
684a873,882
> '-'
> '-'
> OBJECTID the
> STR_CONST ""
> OBJECTID is
> OBJECTID needed
> OBJECTID to
> OBJECTID satisfy
> OBJECTID the
> OBJECTID typchecker
696a895,947
> '('
> '*'
> OBJECTID a2i
> OBJECTID converts
> OBJECTID an
> TYPEID ASCII
> OBJECTID string
> OBJECTID into
> OBJECTID an
> OBJECTID integer
> '.'
> TYPEID The
> OBJECTID empty
> OBJECTID string
> OBJECTID is
> OBJECTID converted
> OBJECTID to
> INT_CONST 0
> '.'
> TYPEID Signed
> OBJECTID and
> OBJECTID unsigned
> OBJECTID strings
> OBJECTID are
> OBJECTID handled
> '.'
> TYPEID The
> OBJECTID method
> OBJECTID aborts
> IF
> OBJECTID the
> OBJECTID string
> OBJECTID does
> NOT
> OBJECTID represent
> OBJECTID an
> OBJECTID integer
> '.'
> TYPEID Very
> OBJECTID long
> OBJECTID strings
> OF
> OBJECTID digits
> OBJECTID produce
> OBJECTID strange
> OBJECTID answers
> OBJECTID because
> OF
> OBJECTID arithmetic
> OBJECTID overflow
> '.'
> '*'
> ')'
786a1038,1061
> '('
> '*'
> OBJECTID a2i_aux
> OBJECTID converts
> OBJECTID the
> OBJECTID usigned
> OBJECTID portion
> OF
> OBJECTID the
> OBJECTID string
> '.'
> TYPEID As
> OBJECTID a
> OBJECTID programming
> OBJECTID example
> ','
> OBJECTID this
> OBJECTID method
> OBJECTID is
> OBJECTID written
> OBJECTID iteratively
> '.'
> '*'
> ')'
865a1141,1160
> '('
> '*'
> OBJECTID i2a
> OBJECTID converts
> OBJECTID an
> OBJECTID integer
> OBJECTID to
> OBJECTID a
> OBJECTID string
> '.'
> TYPEID Positive
> OBJECTID and
> OBJECTID negative
> OBJECTID numbers
> OBJECTID are
> OBJECTID handled
> OBJECTID correctly
> '.'
> '*'
> ')'
907a1203,1213
> '('
> '*'
> OBJECTID i2a_aux
> OBJECTID is
> OBJECTID an
> OBJECTID example
> OBJECTID using
> OBJECTID recursion
> '.'
> '*'
> ')'
988c1294
< STR_CONST "\n\tTo add a number to "
---
> STR_CONST "\\n\\tTo add a number to "
998c1304
< STR_CONST "...enter a:\n"
---
> STR_CONST "...enter a:\\n"
1003c1309
< STR_CONST "\tTo negate "
---
> STR_CONST "\\tTo negate "
1013c1319
< STR_CONST "...enter b:\n"
---
> STR_CONST "...enter b:\\n"
1018c1324
< STR_CONST "\tTo find the difference between "
---
> STR_CONST "\\tTo find the difference between "
1028c1334
< STR_CONST "and another number...enter c:\n"
---
> STR_CONST "and another number...enter c:\\n"
1033c1339
< STR_CONST "\tTo find the factorial of "
---
> STR_CONST "\\tTo find the factorial of "
1043c1349
< STR_CONST "...enter d:\n"
---
> STR_CONST "...enter d:\\n"
1048c1354
< STR_CONST "\tTo square "
---
> STR_CONST "\\tTo square "
1058c1364
< STR_CONST "...enter e:\n"
---
> STR_CONST "...enter e:\\n"
1063c1369
< STR_CONST "\tTo cube "
---
> STR_CONST "\\tTo cube "
1073c1379
< STR_CONST "...enter f:\n"
---
> STR_CONST "...enter f:\\n"
1078c1384
< STR_CONST "\tTo find out if "
---
> STR_CONST "\\tTo find out if "
1088c1394
< STR_CONST "is a multiple of 3...enter g:\n"
---
> STR_CONST "is a multiple of 3...enter g:\\n"
1093c1399
< STR_CONST "\tTo divide "
---
> STR_CONST "\\tTo divide "
1103c1409
< STR_CONST "by 8...enter h:\n"
---
> STR_CONST "by 8...enter h:\\n"
1108c1414
< STR_CONST "\tTo get a new number...enter j:\n"
---
> STR_CONST "\\tTo get a new number...enter j:\\n"
1113c1419
< STR_CONST "\tTo quit...enter q:\n\n"
---
> STR_CONST "\\tTo quit...enter q:\\n\\n"
1132c1438
< STR_CONST "\n"
---
> STR_CONST "\\n"
1257c1563
< STR_CONST "Class type is now A\n"
---
> STR_CONST "Class type is now A\\n"
1266c1572
< STR_CONST "Class type is now B\n"
---
> STR_CONST "Class type is now B\\n"
1275c1581
< STR_CONST "Class type is now C\n"
---
> STR_CONST "Class type is now C\\n"
1284c1590
< STR_CONST "Class type is now D\n"
---
> STR_CONST "Class type is now D\\n"
1293c1599
< STR_CONST "Class type is now E\n"
---
> STR_CONST "Class type is now E\\n"
1302c1608
< STR_CONST "Oooops\n"
---
> STR_CONST "Oooops\\n"
1367a1674,1689
> '-'
> '-'
> OBJECTID avar
> ASSIGN
> '('
> NEW
> TYPEID A
> ')'
> '.'
> OBJECTID set_var
> '('
> OBJECTID get_int
> '('
> ')'
> ')'
> ';'
1390c1712
< STR_CONST "is even!\n"
---
> STR_CONST "is even!\\n"
1395c1717
< STR_CONST "is odd!\n"
---
> STR_CONST "is odd!\\n"
1398a1721,1732
> '-'
> '-'
> OBJECTID print
> '('
> OBJECTID avar
> ')'
> ';'
> '-'
> '-'
> OBJECTID prints
> OBJECTID out
> OBJECTID answer
1414a1749,1751
> '-'
> '-'
> OBJECTID add
1458a1796,1798
> '-'
> '-'
> OBJECTID negate
1503c1843
< STR_CONST "Oooops\n"
---
> STR_CONST "Oooops\\n"
1520a1861,1863
> '-'
> '-'
> OBJECTID diff
1571c1914
< '@'
---
> LEXER BUG - UNMATCHED: @
1582a1926,1928
> '-'
> '-'
> OBJECTID factorial
1594c1940
< '@'
---
> LEXER BUG - UNMATCHED: @
1605a1952,1954
> '-'
> '-'
> OBJECTID square
1617c1966
< '@'
---
> LEXER BUG - UNMATCHED: @
1628a1978,1980
> '-'
> '-'
> OBJECTID cube
1633a1986,1991
> '-'
> '-'
> OBJECTID multiple
> OF
> INT_CONST 3
> LEXER BUG - UNMATCHED: ?
1650a2009,2025
> '-'
> '-'
> OBJECTID avar
> ASSIGN
> '('
> NEW
> TYPEID A
> ')'
> '.'
> OBJECTID method1
> '('
> OBJECTID avar
> '.'
> OBJECTID value
> '('
> ')'
> ')'
1664c2039
< STR_CONST "is divisible by 3.\n"
---
> STR_CONST "is divisible by 3.\\n"
1668a2044,2056
> '-'
> '-'
> OBJECTID avar
> ASSIGN
> '('
> NEW
> TYPEID A
> ')'
> '.'
> OBJECTID set_var
> '('
> INT_CONST 0
> ')'
1682c2070
< STR_CONST "is not divisible by 3.\n"
---
> STR_CONST "is not divisible by 3.\\n"
1788c2176
< STR_CONST "\n"
---
> STR_CONST "\\n"
1793a2182,2187
> '-'
> '-'
> OBJECTID end
> LET
> OBJECTID a
> ':'
1796a2191,2196
> '-'
> '-'
> OBJECTID end
> LET
> OBJECTID r
> ':'
1802a2203,2208
> '-'
> '-'
> OBJECTID end
> LET
> OBJECTID x
> ':'
1839a2246,2250
> '-'
> '-'
> OBJECTID divide
> '/'
> INT_CONST 8
